<%- include('partials/header'); -%>
<%- include('partials/modal'); -%>
<div class="container" id="game">
    <div class="row" id="topBar">
        <div class="col-xs">
            BAR TOP
        </div>
    </div>
    <div class="row" id="board">
        <div class="col-xs">
            <canvas id="canvas" width="1200" height="700">

            </canvas>
        </div>
    </div>
    <div class="row" id="tools">
        <div class="col-xs">
            TOOLS
        </div>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');

    const socket = io.connect('http://localhost:1337');
    const idGame = window.location.pathname.split("-").pop();
    var Game = false;


    socket.emit('getGame', idGame);

    socket.on('setGame', function (GamefromServer) {
        Game = GamefromServer;
    });

    setTimeout(() => {
        console.log(Game.galaxy);


for (idPlanete in Game.galaxy) {
        context.beginPath();
        context.arc(Game.galaxy[idPlanete].position[0], Game.galaxy[idPlanete].position[1], 10, 0, 2 * Math.PI, false);
        context.fillStyle = 'green';
        context.fill();
        context.lineWidth = 0;
        context.strokeStyle = '#fff';
        context.stroke();
    }


    }, 5000)

    const img = new Image();
    img.onload = function () {
        context.drawImage(img, 0, 0);
    };
    img.src = 'https://mdn.mozillademos.org/files/5395/backdrop.png';

    function writeMessage(canvas, message) {
        var context = canvas.getContext('2d');
        context.clearRect(0, 0, 600, 30);
        context.font = '18pt Calibri';
        context.fillStyle = 'black';
        context.fillText(message, 10, 25);
    }

    function checkMouse(postionX, positionY) {
        let result = false;
        /* for (idPlanete in Planetes) {

            if (postionX >= Planetes[idPlanete][0] - 5 && postionX <= Planetes[idPlanete][0] + 2) {
                if (positionY >= Planetes[idPlanete][1] - 5 && positionY <= Planetes[idPlanete][1] + 5) {
                    result = Planetes[idPlanete];
                }
            }

        } */
        return result;
    } 

    function zoomPlanete(planete) {
        const positionX = planete[0];
        const positionY = planete[1];
        context.beginPath();
        context.arc(positionX, positionY, 20, 0, 2 * Math.PI, false);
        context.fillStyle = 'red';
        context.fill();
        context.lineWidth = 0;
        context.strokeStyle = '#fff';
        context.stroke();
        setTimeout(() => {
            context.clearRect(positionX - 25, positionY - 25, 50,
                50);
            context.beginPath();
            context.arc(positionX, positionY, 10, 0, 2 * Math.PI,
                false);
            context.fillStyle = 'green';
            context.fill();
            context.lineWidth = 0;
            context.strokeStyle = '#fff';
            context.stroke();
        }, 2000)
    }

    function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
            x: evt.clientX - rect.left,
            y: evt.clientY - rect.top
        };
    }

    canvas.addEventListener('mousemove', function (evt) {
        var mousePos = getMousePos(canvas, evt);
        var message = 'Mouse position: ' + mousePos.x + ',' + mousePos.y;

        const planete = checkMouse(mousePos.x, mousePos.y)

        if (planete !== false) {
            zoomPlanete(planete);
        }

        writeMessage(canvas, message);
    }, false);




    /* WAIT ANNIMATION !!!!

    var rotateAngle = null;
    var showGuideGrid = true; // set to false to hide the drawing assistance grid
    var animateTheLoader = true; // set to false to disable animation and see the static drawing

    window.onload = function() {

        rotateAngle = 0;

        if (animateTheLoader) {
            loadingAnimation();
        }
        else {
            loadingDrawing();
        }
    };

    function loadingDrawing() {
        context.save();

        context.translate(150, 150);
        context.rotate(rotateAngle * Math.PI/180);
        context.translate(-150, -150);

        context.beginPath();
        context.strokeStyle = "white";
        context.lineWidth = 15;
        context.lineCap = "round";

        context.fillStyle = "rgba(255,255,255,1)";
        context.moveTo(150, 120);
        context.lineTo(150, 50);
        context.stroke();

        context.strokeStyle = "rgba(255,255,255,0.8)";
        context.moveTo(130, 130);
        context.lineTo(80, 80);
        context.stroke();

        context.strokeStyle = "rgba(255,255,255,0.5)";
        context.moveTo(120, 150);
        context.lineTo(50, 150);
        context.stroke();

        context.strokeStyle = "rgba(255,255,255,0.35)";
        context.moveTo(130, 170);
        context.lineTo(80, 220);
        context.stroke();

        context.strokeStyle = "rgba(255,255,255,0.2)";
        context.moveTo(150, 180);
        context.lineTo(150, 250);
        context.stroke();

        context.closePath();

        context.save();

        context.restore();
    }

    function loadingAnimation() {
        canvas.width = canvas.width; // redraw canvas for animation effect

        loadingDrawing();

        rotateAngle += 5;

        if (rotateAngle > 360) {
            rotateAngle = 5;
        }

        setTimeout(loadingAnimation, 30);
    } */
</script>
<%- include('partials/footer'); -%>