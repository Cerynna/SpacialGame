<%- include('partials/header'); -%>
<%- include('partials/modal'); -%>


<div class="container" id="game">
    <div id="planetInfo">
        <h3 id="infoName"></h3>
        <div id="infoPosition"></div>
        <div id="infoSize"></div>
        <div class="value">
            <div id="value-Fer">fer</div>
            <div id="value-Elec">elec</div>
            <div id="value-Money">money</div>
        </div>
        <div id="construct" class="row">

        </div>
    </div>
    <div class="row" id="topBar">
        <div class="col-xs-1 ressources">
            <div id="Res-Iron" class="iron"></div>
        </div>
        <div class="col-xs-1 ressources">
            <div id="Res-Elec" class="elec"></div>
        </div>
        <div class="col-xs-1 ressources">
            <div id="Res-Money" class="money"></div>
        </div>
    </div>
    <div class="row" id="board">
        <div class="col-xs">
            <canvas id="Map" width="1200" height="700">

            </canvas>
        </div>
    </div>
    <div class="row" id="tools">
        <div class="col-xs" id="order">
            <div class="row">
                <div class="col-xs-10"><input type="text" id="order-1" class="order"></div>
                <div class="col-xs">
                    <div class="btn" onclick="deleteOrder(1)">X</div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-10"><input type="text" id="order-2" class="order"></div>
                <div class="col-xs">
                    <div class="btn" onclick="deleteOrder(2)">X</div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-10"><input type="text" id="order-3" class="order"></div>
                <div class="col-xs">
                    <div class="btn" onclick="deleteOrder(3)">X</div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-10"><input type="text" id="order-4" class="order"></div>
                <div class="col-xs">
                    <div class="btn" onclick="deleteOrder(4)">X</div>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-10"><input type="text" id="order-5" class="order"></div>
                <div class="col-xs">
                    <div class="btn" onclick="deleteOrder(5)">X</div>
                </div>
            </div>


        </div>
        <div class="col-xs">
            TOOLS
        </div>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
    const canvasMap = document.getElementById('Map');
    const contextMap = canvasMap.getContext('2d');


    contextMap.scale(1, 1);

    const socket = io.connect('http://localhost:1337');
    const idGame = window.location.pathname.split("-")[1];
    const idPlayer = window.location.pathname.split("-")[2];
    const planetInfo = document.getElementById("planetInfo");
    const infoName = document.getElementById("infoName");
    const infoPosition = document.getElementById("infoPosition");
    const valueFer = document.getElementById("value-Fer");
    const valueElec = document.getElementById("value-Elec");
    const valueMoney = document.getElementById("value-Money");
    const listConstruct = document.getElementById("construct");
    const infoSize = document.getElementById("infoSize");
    const listOrder = document.querySelectorAll(".order");

    const playerIron = document.getElementById("Res-Iron");
    const playerElec = document.getElementById("Res-Elec");
    const playerMoney = document.getElementById("Res-Money");

    let Game = false;
    let me;


    socket.emit('getGame', idGame);

    socket.on('setGame', function (GamefromServer) {
        Game = GamefromServer;
        for (key in Game.playerIn) {
            if (Game.playerIn[key].id === idPlayer) {
                me = Game.playerIn[key];
                me.key = key;

                playerIron.innerHTML = me.Res.Iron;
                playerElec.innerHTML = me.Res.Elec;
                playerMoney.innerHTML = me.Res.Money;
            }
        }

        for (idPlanete in Game.galaxy) {
            if (searchConnect(Game.galaxy[idPlanete].position[0], Game.galaxy[idPlanete].position[1],
                    exploration(me.key, Game.galaxy)) === true) {
                Game.galaxy[idPlanete].connect = true;
                drawPlanete(Game.galaxy[idPlanete]);
            }
        }
    });

    function exploration(playerKey, galaxy) {
        let result = [];
        for (keyPlanet in galaxy) {
            if (galaxy[keyPlanet].construct[1].player == playerKey) {
                result.push(findConnectPlanet(galaxy[keyPlanet].position[0], galaxy[keyPlanet].position[1]))
            }

        }
        let wait = [];
        for (key in result) {
            for (id in result[key]) {
                wait.push(result[key][id])
            }
        }
        return wait;
    }

    function deleteOrder(nbInput) {

        let Order = document.getElementById(`order-${nbInput}`);
        Order.parse = Order.value.split(' - ');
        Order.parse[2] = Order.parse[1].split(',').pop();
        Order.parse[1] = Order.parse[1].split(',').shift();
        console.log(findKeyPlanete(Order.parse[1], Order.parse[2]));
        const keyPlanet = findKeyPlanete(Order.parse[1], Order.parse[2])
        Game.galaxy[keyPlanet].construct[Order.parse[0]].player = null;
        drawPlanete(Game.galaxy[keyPlanet]);
        Order.value = "";
    }




    function drawPlanete(planete) {
        contextMap.clearRect(planete.position[0] - 30, planete.position[1] - 30, 100, 100);
        contextMap.beginPath();
        contextMap.arc(planete.position[0], planete.position[1], planete.size, 0, 2 * Math
            .PI, false);
        contextMap.fillStyle = planete.color;
        contextMap.fill();
        contextMap.lineWidth = 0;
        contextMap.strokeStyle = '#fff';
        contextMap.stroke();
        addBatiment(planete);
    }

    function findKeyPlanete(positionX, positionY) {
        for (key in Game.galaxy) {
            if (positionX == Game.galaxy[key].position[0] && positionY == Game.galaxy[key].position[1]) {
                return key;
            }
        }
    }

    function addBatiment(planete) {
        for (key in planete.construct) {
            if (planete.construct[key].player !== null) {
                const img = new Image();
                switch (planete.construct[key].type) {
                    case 'atack':
                        img.src = `img/batiments/${planete.construct[key].player}/attack.png`;
                        img.onload = function () {
                            contextMap.drawImage(img, planete.position[0] - 25, planete.position[1] - 10, 25, 25);
                        };
                        break;
                    case 'explo':
                        img.src = `img/batiments/${planete.construct[key].player}/explo.png`;
                        img.onload = function () {
                            contextMap.drawImage(img, planete.position[0], planete.position[1] - 25, 25, 25);
                        };
                        break;
                    case 'commerce':
                        img.src = `img/batiments/${planete.construct[key].player}/commerce.png`;
                        img.onload = function () {
                            contextMap.drawImage(img, planete.position[0], planete.position[1] + 5, 25, 25);
                        };
                        break;
                    case 'megapole':
                        img.src = `img/batiments/${planete.construct[key].player}/megapole.png`;
                        img.onload = function () {
                            contextMap.drawImage(img, planete.position[0] - 30, planete.position[1] - 30, 80, 80);
                        };
                        break;
                }
            }
        }

    }

    function searchConnect(positionX, positionY, myArray) {
        for (var i = 0; i < myArray.length; i++) {
            if (myArray[i].x === positionX && myArray[i].y === positionY) {
                return true;
            }
        }
        return false;
    }


    function findConnectPlanet(positionX = 250, positionY = 350) {

        let minX = positionX - 200;
        let maxX = positionX + 200;
        let result = [];
        result[0] = {
            x: minX,
            y: (positionY + 100)
        };
        result[1] = {
            x: minX,
            y: positionY
        };
        result[2] = {
            x: minX,
            y: (positionY - 100)
        };
        result[3] = {
            x: (minX + 100),
            y: (positionY + 50)
        };
        result[4] = {
            x: (minX + 100),
            y: (positionY + 150)
        };
        result[5] = {
            x: (minX + 100),
            y: (positionY - 50)
        };
        result[6] = {
            x: (minX + 100),
            y: (positionY - 150)
        };
        result[7] = {
            x: positionX,
            y: (positionY + 100)
        };
        result[8] = {
            x: positionX,
            y: (positionY + 200)
        };
        result[9] = {
            x: positionX,
            y: (positionY - 100)
        };
        result[10] = {
            x: positionX,
            y: (positionY - 200)
        };
        result[11] = {
            x: (maxX - 100),
            y: (positionY - 50)
        };
        result[12] = {
            x: (maxX - 100),
            y: (positionY - 150)
        };
        result[13] = {
            x: (maxX - 100),
            y: (positionY + 50)
        };
        result[14] = {
            x: (maxX - 100),
            y: (positionY + 150)
        };
        result[15] = {
            x: maxX,
            y: (positionY + 100)
        };
        result[16] = {
            x: maxX,
            y: positionY
        };
        result[17] = {
            x: maxX,
            y: (positionY - 100)
        };
        result[18] = {
            x: positionX,
            y: positionY
        };
        return result;

    }

    function getBatiment(type, planete) {

        position = planete.split(',')
        const listInput = listOrder;
        let verifOrder = false;
        for (key in listOrder) {
            if (listOrder[key].tagName === 'INPUT') {
                if (listInput[key].value === '' && verifOrder === false) {
                    listOrder[key].value = type + " - " + planete
                    verifOrder = true;

                }
            }
        }


        if (verifOrder === true) {
            for (key in Game.galaxy) {
                if (Game.galaxy[key].position[0] == position[0] && Game.galaxy[key].position[1] == position[1]) {
                    Game.galaxy[key].construct[type].player = me.key;
                    planetInfo.style.display = "none";
                    console.log("FIND");
                    drawPlanete(Game.galaxy[key]);

                }
            }


        }




    }

    function writeMessage(canvas, message) {
        var contextMap = canvas.getContext('2d');
        /* contextMap.clearRect(0, 0, 600, 30); */
        contextMap.font = '18pt Calibri';
        contextMap.fillStyle = 'black';
        contextMap.fillText(message, 10, 25);
    }

    function checkMouse(positionX, positionY) {
        let result = false;
        for (idPlanete in Game.galaxy) {
            if (positionX >= Game.galaxy[idPlanete].position[0] - 10 && positionX <= Game.galaxy[idPlanete].position[
                    0] +
                10) {
                if (positionY >= Game.galaxy[idPlanete].position[1] - 10 && positionY <= Game.galaxy[idPlanete]
                    .position[
                        1] + 10) {
                    result = Game.galaxy[idPlanete];
                }
            }
        }
        return result;
    }

    function zoomPlanete(planete) {
        const positionX = planete.position[0];
        const positionY = planete.position[1];
        contextMap.beginPath();
        contextMap.arc(positionX, positionY, 20, 0, 2 * Math.PI, false);
        contextMap.fillStyle = 'red';
        contextMap.fill();
        contextMap.lineWidth = 0;
        contextMap.strokeStyle = '#fff';
        contextMap.stroke();
        setTimeout(() => {
            contextMap.clearRect(positionX - 25, positionY - 25, 50,
                50);
            contextMap.beginPath();
            contextMap.arc(positionX, positionY, planete.size, 0, 2 * Math.PI,
                false);
            contextMap.fillStyle = planete.color;
            contextMap.fill();
            contextMap.lineWidth = 0;
            contextMap.strokeStyle = '#fff';
            contextMap.stroke();
        }, 2000)
    }

    function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
            x: evt.clientX - rect.left,
            y: evt.clientY - rect.top
        };
    }

    canvasMap.addEventListener('mousemove', function (evt) {
        var mousePos = getMousePos(canvasMap, evt);
        var message = 'Mouse position: ' + mousePos.x + ',' + mousePos.y;

        const planete = checkMouse(mousePos.x, mousePos.y)

        if (planete !== false) {
            if (planete.connect === true) {
                console.log('PLANETE !!!');
                planetInfo.style.top = (evt.pageY - 30) + "px";
                planetInfo.style.left = (evt.pageX - 30) + "px";
                planetInfo.style.display = "block";
                infoName.innerHTML = planete.name
                infoPosition.innerHTML = planete.position
                infoSize.innerHTML = planete.size;
                valueFer.innerHTML = planete.value.fer;
                valueElec.innerHTML = planete.value.elec;
                valueMoney.innerHTML = planete.value.money;
                listConstruct.innerHTML = "";
                const megapole = planete.construct[3];
                delete planete.construct[3];
                for (key in planete.construct) {
                    if (planete.construct[key].player === null) {
                        listConstruct.innerHTML +=
                            `<div class="col-xs-2 batiment" onclick="getBatiment('${key}','${planete.position}' )">
                                <div class="${planete.construct[key].type}"></div>
                                </div>`;
                    } else {
                        listConstruct.innerHTML +=
                            `<div class="col-xs-2 batiment player${planete.construct[key].player}">
                                <div class="${planete.construct[key].type}"></div>
                                </div>`;
                    }
                }

                if (megapole.player !== null) {
                    console.log("MEGAPOLE PLAYER");
                    listConstruct.innerHTML +=
                        `<div class="col-xs-11">Pallier Sup</div>
                        <div class="col-xs-2 batiment player${planete.construct[key].player}">
                                <div class="${megapole.type}"></div>
                                </div>`;
                } else {
                    console.log("MEGAPOLE NUll");
                    console.log(me.key);
                    if (planete.construct[0].player == me.key && planete.construct[1].player == me.key &&
                        planete.construct[2].player ==
                        me.key) {
                        listConstruct.innerHTML +=
                            `<div class="col-xs-11">Pallier Sup</div>
                            <div class="col-xs-2 batiment" onclick="getBatiment('3','${planete.position}' )">
                                <div class="megapole"></div>
                                </div>`;
                    }
                }
                planete.construct[3] = megapole;
            }


            /* zoomPlanete(planete); */
        }

        writeMessage(canvasMap, message);
    }, false);

    planetInfo.addEventListener("mouseleave", (evt) => {
        planetInfo.style.display = "none";


    });




    /* canvas.addEventListener('click', function (evt) {

        var mousePos = getMousePos(canvas, evt);
        const planete = checkMouse(mousePos.x, mousePos.y)
        console.log(planete);
        if (planete !== false) {
            console.log('PLANETE !!!');
            planetInfo.style.top = (evt.pageY - 30) + "px";
            planetInfo.style.left = (evt.pageX - 30) + "px";

            infoName.innerHTML = planete.name
            infoPosition.innerHTML = planete.position
            infoSize.innerHTML = planete.size + "fer: " + planete.value.fer + " | elec: " + planete.value.elec + " | money: " + planete.value.money;
        }

    }, false); */



    /* WAIT ANNIMATION !!!!

    var rotateAngle = null;
    var showGuideGrid = true; // set to false to hide the drawing assistance grid
    var animateTheLoader = true; // set to false to disable animation and see the static drawing

    window.onload = function() {

        rotateAngle = 0;

        if (animateTheLoader) {
            loadingAnimation();
        }
        else {
            loadingDrawing();
        }
    };

    function loadingDrawing() {
        contextMap.save();

        contextMap.translate(150, 150);
        contextMap.rotate(rotateAngle * Math.PI/180);
        contextMap.translate(-150, -150);

        contextMap.beginPath();
        contextMap.strokeStyle = "white";
        contextMap.lineWidth = 15;
        contextMap.lineCap = "round";

        contextMap.fillStyle = "rgba(255,255,255,1)";
        contextMap.moveTo(150, 120);
        contextMap.lineTo(150, 50);
        contextMap.stroke();

        contextMap.strokeStyle = "rgba(255,255,255,0.8)";
        contextMap.moveTo(130, 130);
        contextMap.lineTo(80, 80);
        contextMap.stroke();

        contextMap.strokeStyle = "rgba(255,255,255,0.5)";
        contextMap.moveTo(120, 150);
        contextMap.lineTo(50, 150);
        contextMap.stroke();

        contextMap.strokeStyle = "rgba(255,255,255,0.35)";
        contextMap.moveTo(130, 170);
        contextMap.lineTo(80, 220);
        contextMap.stroke();

        contextMap.strokeStyle = "rgba(255,255,255,0.2)";
        contextMap.moveTo(150, 180);
        contextMap.lineTo(150, 250);
        contextMap.stroke();

        contextMap.closePath();

        contextMap.save();

        contextMap.restore();
    }

    function loadingAnimation() {
        canvas.width = canvas.width; // redraw canvas for animation effect

        loadingDrawing();

        rotateAngle += 5;

        if (rotateAngle > 360) {
            rotateAngle = 5;
        }

        setTimeout(loadingAnimation, 30);

    } */

    /*  ADD IMG
  
    const img = new Image();
      img.onload = function () {
          contextMap.drawImage(img, 0, 0);
      };
      img.src = 'https://mdn.mozillademos.org/files/5395/backdrop.png';
       */
</script>
<%- include('partials/footer'); -%>